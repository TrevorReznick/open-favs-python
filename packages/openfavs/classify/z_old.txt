  
  def medatata_extractor_old(self): #analizza il contenuto del sito e popola oggetto metadata        

        
        for key in Config.METADATA:
            
            if key.startswith('og:'):
                Config.METADATA[key] = self.get_meta_tag(property=key)              
                                
            elif key.startswith('twitter:'):
                Config.METADATA[key] = self.get_meta_tag(property=key)
                
            else:
                # Gestione speciale per 'charset'
                if key == 'charset':
                    Config.METADATA[key] = self.get_meta_tag(charset=True)
                else:
                    # Cerca per 'name' e non 'property'
                    Config.METADATA[key] = self.get_meta_tag(name=key)

        return
    
    def extract_metadata_old(self): #prende i metadata e restituisce oggetto solo se valori non sono nulli

        metadata = Config.METADATA_NEW     
        
        metadata['name'] = self.get_meta_tag(property='og:site_name')
        metadata['title'] =  self.get_meta_tag(property='og:title')
        metadata['description'] = self.get_meta_tag(property='og:description')
        metadata['url'] = self.get_meta_tag(property='og:url')
        metadata['type'] = self.get_meta_tag(property='og:type')
        metadata['image'] = self.get_meta_tag(property='og:image')        
        metadata['domain'] = self.get_meta_tag(property='forem:domain')
        metadata['logo'] = self.get_meta_tag(property='forem:logo')

        _functions = {
            "name": lambda: "hello from missing name",
            "title": self.get_title,
            "description": lambda: "hello from missing description"            
        }

        for key, value in metadata.items():

            if value is None:

                print(f"La proprietà '{key}' ha un valore None.")

                if key in _functions:

                    value = _functions[key]()
        
        
        """
        my_filtered_metadata = {
            k: v for k, v in metadata.items() if v is not None
        }

        print('my_filter_metadata', my_filtered_metadata)

        """

        _functions = {
            "title": self.get_title,
            "description": lambda: "hello from missing description",
            "name": lambda: "hello from missing name"
        }
        
        """
        if not my_filtered_metadata:
            return None 
        """        
        
        return 
        
    
    
    def extract_metadata_new(self): #prende i metadata e restituisce oggetto solo se valori non sono nulli

        metadata = Config.METADATA_NEW        
        
        metadata['name'] = self.get_meta_tag(property='og:site_name')
        metadata['title'] =  self.get_meta_tag(property='og:title')
        metadata['description'] = self.get_meta_tag(property='og:description')
        metadata['url'] = self.get_meta_tag(property='og:url')
        metadata['type'] = self.get_meta_tag(property='og:type')
        metadata['image'] = self.get_meta_tag(property='og:image')        
        metadata['domain'] = self.get_meta_tag(property='forem:domain')
        metadata['logo'] = self.get_meta_tag(property='forem:logo')        
        
        # Dizionario che conterrà i risultati filtrati e processati
        """
        my_filtered_metadata = {}

        my_filtered_metadata = {
            k: v for k, v in metadata.items() if v is not None
        }

        print('my_filter_metadata: ', my_filtered_metadata)
        """

        print('metadata: ', metadata)

        # Dizionario per associare le chiavi alle funzioni specifiche
        _functions = {
            "title": self.get_title,
            "description": lambda: "hello from missing description",
            "name": lambda: "hello from missing name"
        }

        # Itera attraverso ogni elemento nel dizionario metadata
        for key, value in metadata.items():

            # Se il valore è None, esegue una funzione predefinita per quella chiave
            if value is None:
                print(f"'{key}': is None")
                if key in _functions:
                    value = _functions[key]()
                    Config.METADATA_NEW[key] = value
                    continue
            else:
                # Se c'è una funzione associata alla chiave, la esegue
                if key in _functions:
                    value = _functions[key](value)
                
                # Controlla se il valore è escluso dalla configurazione
                if Config.is_excluded(value):
                    print(f"Il valore '{value}' per '{key}' è escluso.")
                    #my_filtered_metadata[key] = None
                    continue  # Salta l'aggiunta di questo elemento

            # Aggiunge la chiave e il valore processato al dizionario finale
            #my_filtered_metadata[key] = value

            # Se il dizionario risultante è vuoto, restituisce None
            #if not my_filtered_metadata:
                #return None

            #return my_filtered_metadata
            print('new metadata: ', Config.METADATA_NEW)
            return
    
    
    
  # @@ testing find similarities and spli sentences @@ #

    """matches = find_partial_matches(description, Config.SUGGESTIONS)

    for match in matches:
        print(f"Found match: {match[0]} -> {match[1]}")
    """

    # 1. Suddividi la frase in sottofrasi
    sub_phrases = split_sentence(description)
    #print(f"Sub-phrases: {sub_phrases}")

    # 2. Crea un dizionario delle sottofrasi
    phrases_dict = create_phrases_dict(sub_phrases)
    #print(f"Phrases dictionary: {phrases_dict}")

    suggestions_found = {}
    suggestion = ""


    
    refactor_prompt = refactor_classify_agent(my_string, name, title, description, html_content)
    re_re_classify = AI.asks_ai(refactor_prompt, Config.SUPERVISOR_ROLE)
    #print('hello, refactor prompt!')
    #print('third prompt: ', re_re_classify)
 
 refining_prompt = create_reclassify_prompt(my_string, sub_cat_str, description, title)
    re_classify = AI.asks_ai(refining_prompt, Config.SUPERVISOR_ROLE)   
    #print('second prompt: ', re_classify)  
 
 prompt = create_classify_prompt(main_cat_str, description, suggestion, sub_cat_str)    
    classify = AI.asks_ai(prompt, Config.ROLE)
    #json_object = extract_json(classify, 'str_to_obj')
    #my_string = extract_my_string(classify, 'my_string')
    #result = {**json_object, **my_string} # Combina i risultati
    #print('first propmt: ', classify)
    """
prompt = create_classify_prompt(main_cat_str, description, suggestion, sub_cat_str)    
    classify = AI.asks_ai(prompt, Config.ROLE)
    json_object = extract_json(classify, 'str_to_obj')
    my_string = extract_my_string(classify, 'my_string')

def add_element(self, element, value):
    # Aggiunge una coppia chiave-valore al dizionario
    self.site_info[element] = value
    return self.site_info



title_tag = soup.find('title')
meta_description = soup.find('meta', attrs={"name": "description"})
description = soup.title.description
self.add_element('description', description)
#self.add_element('meta_description' , meta_description)
print("Debug Titolo:", title)
print('Debug title_tag: ', title_tag)
#print('Debug meta_description: ', meta_description)
if meta_description:
    print(meta_description['content'])  # Stampa il contenuto del tag meta description
    # Estrai il canonical link
    canonical_link = soup.find('link', attrs={'rel': 'canonical'})
    if canonical_link:
        print(canonical_link['href'])  # Stampa l'URL del canonical link
        tag_as_string = str(canonical_link)
        json_output = json.dumps({'content': tag_as_string}, ensure_ascii=False)
        self.add_element('canonical_link', json_output)
    # Estrai i metadati og:title
    #og_title = soup.find('meta', attrs={'property': 'og:title'})
    #if og_title:
    #print(og_title['content'])  # Stampa il contenuto del tag og:title
    #self.add_element('og_title', og_title)
    print('Debug description: ', description)
    return self.site_info
"""
for idx, sub_phrase in phrases_dict.items():

        matches = find_partial_matches_new(sub_phrase, Config.SUGGESTIONS)

        formatted_matches = [{k: v} for k, v in matches]

        if formatted_matches:  # Aggiungi solo se ci sono match
            suggestion_ = suggestions_found[sub_phrase] = formatted_matches
            suggestion_1 = [list(d.values())[0] for d in suggestion_]
            #print('suggestion', suggestion)
            suggestion = (" ".join(suggestion_1))
            #print('suggestion', suggestion)
        else:
            print('nessuna suggestion trovata')


        """if(matches):
            print(f"Matches for sub-phrase '{sub_phrase}': {matches}")
        else:
            print('nessuna suggestion trovata')"""